data Region
	data Base
		Array[()*] ptrs

		action create

		action destroy
			ptrs.each(\p -> Mem.free p)

		fn ref()
			return Region(&self)

	Base* base

	fn alloc(uint size)
		var ptr = C.malloc(size)
		base.ptrs.push ptr
		return ptr_cast ptr

	fn realloc[T](T* ptr, uint old_size , uint new_size) -> T*
		var new_ptr = C.malloc(new_size)
		Mem.copy(ptr_cast ptr, new_ptr, old_size)
		base.ptrs.push new_ptr
		return ptr_cast new_ptr

	fn new[Constructor T = Reference[R].Type, R] *args -> R
		return allocate[T](args, self)

instance Allocator[Region]
	fn alloc[P](uint size) -> P*
		return self.alloc(size)

	fn realloc[P](P* ptr, uint old_size, uint new_size) -> P*
		return self.realloc(ptr, old_size, new_size)

	fn free[P](P* ptr)