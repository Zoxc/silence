struct Region
	struct Base
		ptrs Array(*())

		action create

		action destroy
			ptrs.each(|p| Mem.free p)

		fn ref()
			return Region(&self)

	base *Base

	fn alloc(size uint)
		.ptr = C.malloc(size)
		base.ptrs.push ptr
		return ptr_cast ptr

	fn realloc[T](ptr *T, old_size uint, new_size uint) -> *T
		.new_ptr = C.malloc(new_size)
		Mem.copy(ptr_cast ptr, new_ptr, old_size)
		base.ptrs.push new_ptr
		return ptr_cast new_ptr

	fn new[T Constructor = Reference(R).Type, R] *args -> R
		return allocate[T](args, self)

instance Allocator(Region)
	fn alloc[P](size uint) -> *P
		return self.alloc(size)

	fn realloc[P](ptr *P, old_size uint, new_size uint) -> *P
		return self.realloc(ptr, old_size, new_size)

	fn free[P](ptr *P)