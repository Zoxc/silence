use "../core"
use "source"

enum Token
	None
	Unknown
	Ident
	Number
	EndOfFile

struct ref Lexer
	struct State
		pos *char
		input_end *char

		lexer *Lexer
		type Token
		start *char
		stop *char

		action create(pos, end, lexer) :
			pos <- pos,
			input_end <- end,
			lexer <- lexer,
			type <- Token.None,
			start <- undef(),
			stop <- undef()

		fn end()
			stop = pos

		fn str()
			return String.from_data(start, ptr_diff(stop, start))

	struct ref Input
		lexer *Lexer

		fn pos()
			return lexer.tok.pos

		fn step()
			assert -> !at_end()
			lexer.tok.pos = ptr_idx(pos(), 1)
			return *pos()

		fn at_end()
			return pos() == lexer.tok.input_end

		fn in(a, b)
			return (a <= c()) & (c() <= b)

		fn c()
			return *pos()

		fn eq(c char)
			return *pos() == c

	compiler *Compiler
	tok State
	file *SrcFile
	i Input
	jump_table Table(256, () -> ())

	fn src() -> *SrcLoc
		return new(file, tok.start, tok.stop)

	fn report[T] *args
		.error = Callable(new[T]).apply(Cell(src(), args))
		compiler.errors.push error

	action create(compiler, file) :
		compiler <- compiler,
		file <- file,
		tok <- State(file.content.data, ptr_idx(file.content.data, file.content.size - 1), &self),
		i <- Input(&self),
		jump_table <- undef()

		setup_table()
		step()

	fn setup_table()
		.set_char = |i char, f|
			jump_table(force_cast i) = f

		.set_chars = |start char, stop, f|
			for_range(start, stop, |i| set_char(i, f))

		set_chars(0, 255, unknown)

		set_chars("0", "9", number)

		set_chars("A", "Z", ident)
		set_chars("a", "z", ident)
		set_char("_", ident)

		set_char(0, eof)

	fn step()
		tok.type = Token.None
		tok.start = i.pos()

		jump_table(force_cast i.c())()

		assert -> ptr_int tok.stop >= ptr_int tok.start
		assert -> tok.type != Token.None

	fn eof()
		if i.at_end()
			tok.type = Token.EndOfFile
			tok.end()
		else
			tok.end()
			report[Error.NullChar]()
			i.step()
			step()

	fn number()
		i.step()

		loop
			if !i.in("0", "9")
				break
			i.step()

		tok.end()
		tok.type = Token.Number

	fn ident()
		i.step()

		loop
			if !(i.in("0", "9") or i.in("A", "Z") or i.in("a", "z") or i.c() == "_")
				break
			i.step()

		tok.end()
		tok.type = Token.Ident

	fn unknown()
		i.step()

		loop
			if jump_table(force_cast i.c()) != unknown
				break
			i.step()

		tok.end()

		report[Error.UnknownChars]()

		step()
