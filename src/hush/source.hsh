use "src-file"

data SrcLoc
	shared SrcLoc error_obj = Error()
	shared error = &error_obj

	when Error

	when File
		SrcFile* file
		char* start
		char* stop

		fn size()
			return ptr_diff(stop, start)

		fn line_nr(char* pos)
			var c = file.content.data()
			var uint line = 1

			loop
				if c == pos
					break
				if *c == 10
					line += 1
				else if *c == 13
					line += 1
					if *(ptr_succ c) == 10
						c = ptr_succ c
				c = ptr_succ c

			return line

		fn line_start()
			var file_start = file.content.data()
			var c = start

			loop
				if c == file_start
					if *c == 10
						c = ptr_succ c
					break
				if *c == 10
					if *(ptr_pred c) == 13
						c = ptr_pred c
					c = ptr_succ c
					break
				c = ptr_pred c

			return min(c, start)

		fn line_end(char* c)
			loop
				if ptr_idx(file.content.data(), file.content.size()) == c
					break

				match *c
					when 10, 13
						break
					else

				c = ptr_succ c

			return c

		fn indicator(char* c)
			var result

			loop
				if ptr_int c >= ptr_int start
					break

				result ~= if *c == 9
					String.from_c(9)
				else
					" "

				c = ptr_succ c

			if size() == 1
				result ~= "^"
			else
				c = start
				loop
					if ptr_idx(file.content.data(), file.content.size()) == c or ptr_int c >= ptr_int stop
						break

					match *c
						when 10, 13
							break
						else

					result ~= if ptr_int c < ptr_int stop
					    "~"
					else
						" "

					c = ptr_succ c

			return result

		fn format()
			var line = line_start()
			var prefix = file.path ~ ":" ~ show line_nr(line) ~ " "
			var ind = (" " :: String).repeat(prefix.size()) ~ indicator(line)

			return prefix ~ String.from_data(line, ptr_diff(line_end(line), line)) ~ String.from_c(10) ~ ind

	fn format()
		return match self as src
			when Error
				"Error"
			when File
				src.format()