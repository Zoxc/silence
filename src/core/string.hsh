struct String
	data *char
	size uint
	
	action create :
		size <- 0,
		data <- Mem.alloc(0)
	
	action copy
		.new = Mem.alloc(size)
		Mem.copy(data, new, size)
		data = new

	action destroy
		Mem.free(data)

	shared fn from_c(data char)
		.new = Mem.alloc(size_of[char]())
		Mem.copy(&data, new, size_of[char]())
		return String(new, 1)

	shared fn from_data(data *char, size)
		.new = Mem.alloc(size)
		Mem.copy(data, new, size)
		return String(new, size)

	fn c_term()
		.z char = 0
		return self ~ String.from_data(&z, 1)

	fn c_str(f)
		.str = c_term()
		return f(str.data)

	fn each(f)
		times(size, |i| f(*ptr_idx(data, i)))

	fn repeat(t uint) -> String
		.r
		times(t, |i| r ~= self)
		return r

instance StringLiteral(String)
	fn create(data *char, size)
		return String.from_data(data, size)

instance Joinable(String)
	fn join(lhs String, rhs String)
		.new_size = lhs.size + rhs.size
		.new = Mem.alloc(new_size)
		Mem.copy(lhs.data, new, lhs.size)
		.rhs_pos = ptr_idx(new, lhs.size)
		Mem.copy(rhs.data, rhs_pos, rhs.size)
		return String(new, new_size)
