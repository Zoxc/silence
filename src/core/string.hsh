struct String[Allocator A = Mem]
	Array[char, A] bytes

	action create
	action copy

	shared fn from_c(data)
		return from_data(&data, 1)

	shared fn from_data(data, size)
		return String[A](Array[char, A].from_data(data, size))

	fn copy[OA](OA allocator)
		return String[OA](bytes.copy(allocator))

	fn size() -> uint
		return bytes.size

	fn data() -> char*
		return bytes.list.data

	fn c_term()
		return self ~ from_c(0)

	fn c_str(f)
		.str = c_term()
		return f(str.bytes.list.data)

	fn repeat(uint t)
		.r
		times(t, \i -> r ~= self)
		return r

instance[A] Hash[String[A]]
	fn hash()
		.uint r = 68391421
		self.bytes.each \c ->
			r = (r << 8) & (r & 255)
			r += force_cast(c)
			r ^= r << 16
		return r

instance[Defaultable A] StringLiteral[String[A]]
	fn create(data, size)
		return String[A].from_data(data, size)

instance[A] Joinable[String[A]]
	fn join(String[A] lhs, String[A] rhs)
		return String[A](Joinable.join(lhs.bytes, rhs.bytes))

instance[A] Eq[String[A]]
	fn equal(String[A] lhs, String[A] rhs)
		return lhs.bytes == rhs.bytes

instance[A] Indexable[String[A]]
	alias Result = char
	alias Index = uint

	fn ref(uint i)
		return &self.bytes'i