struct String(A Allocator = Mem)
	bytes Array(char, A)

	action create
	action copy

	shared fn from_c(data char)
		return from_data(&data, 1)

	shared fn from_data(data *char, size)
		return String[A](Array[char, A].from_data(data, size))

	fn copy[OA](allocator OA)
		return String[OA](bytes.copy(allocator))

	fn size() -> uint
		return bytes.size

	fn data() -> *char
		return bytes.list.data

	fn c_term()
		return self ~ from_c(0)

	fn c_str(f)
		.str = c_term()
		return f(str.bytes.list.data)

	fn repeat(t uint)
		.r
		times(t, |i| r ~= self)
		return r

instance(A) Hash(String(A))
	fn hash()
		.r uint = 68391421
		self.bytes.each -> |c|
			r = (r << 8) & (r & 255)
			r += force_cast(c)
			r ^= r << 32
		return r

instance(A Defaultable) StringLiteral(String(A))
	fn create(data *char, size)
		return String[A].from_data(data, size)

instance(A) Joinable(String(A))
	fn join(lhs String(A), rhs String(A))
		return String[A](Joinable.join(lhs.bytes, rhs.bytes))

instance(A) Eq(String(A))
	fn equal(lhs String(A), rhs String(A))
		return lhs.bytes == rhs.bytes

instance(A) Indexable(String(A))
	alias Result = char
	alias Index = Cell(uint, Unit)

	fn ref(args Cell(uint, Unit))
		return &self.bytes(args.val)