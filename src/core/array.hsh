data Array[T, Allocator A = Mem]
	PtrArray[T, A] list
	uint size
	uint capacity

	shared unit = size_of[T]()

	action create :
			list <- PtrArray(A())
	
	action create(allocator) :
			list <- PtrArray(allocator)
	
	action copy
		if capacity > 0
			list = list.copy(size)
			capacity = size

	action destroy
		if capacity > 0
			list.destroy_n(size)

	fn allocator()
		return list.allocator

	shared fn from_data_a(T* data, size, allocator)
		var result = Array[T, A](allocator)
		if size > 0
			result.list.destroy_n(0)
			result.list = PtrArray[T, A].from_data(allocator, data, size)
			result.size = size
			result.capacity = size
		return result

	shared fn from_data(data, size)
		return from_data_a(data, size, A())

	fn clear()
		list.destroy_n(size)
		capacity = 0
		size = 0

	fn concat[OA](Array[T, OA] other)
		expand(other.size)
		times(other.size, \i -> list.set(size + i, other'i))
		size += other.size

	fn copy[OA](OA allocator)
		var r = Array[T, OA](allocator)
		r.concat self
		return r

	fn all(f)
		var i = 0
		loop
			if i >= size
				break
			if !f(self'i, i)
				return false
			i += 1
		return true

	fn each(f)
		times(size, \i -> f(self'i))

	fn each_with_index(f)
		times(size, \i -> f(self'i, i))

	fn reverse()
		var result = Array[T, A](allocator())
		result.expand(size)
		times(size, \i -> result.list.set(i, self'(size - 1 - i)))
		result.size = size
		return result

	fn slice(start, stop)
		var result = Array[T, A](allocator())
		if start > stop
			return result
		var size = stop - start + 1
		result.expand(size)
		times(size, \i -> result.list.set(i, self'(start + i)))
		result.size = size
		return result

	fn expand(n)
		var c = capacity

		if c >= size + n
			return

		loop
			c = 2 * c + 1
			if c >= size + n
				break

		if capacity == 0
			list.alloc(c)
		else
			list.expand(size, c)

		capacity = c

	fn last()
		return if size > 0
			some(self'(size - 1))
		else
			Option.None()

	fn push(val)
		expand(1)
		list.set(size, val)
		size += 1

	fn pop() -> Option[T]
		return if size > 0
			size -= 1
			var r = some(self'size)
			list.del(size)
			r
		else
			nil

instance[Eq T, A] Eq[Array[T, A]]
	fn equal(Array[T, A] lhs, Array[T, A] rhs)
		if lhs.size != rhs.size
			return false
		return lhs.all(\v, i -> v == rhs'i)

instance[T, A] Joinable[Array[T, A]]
	fn join(Array[T, A] lhs, Array[T, A] rhs)
		lhs.concat rhs
		return lhs

instance[T, A] Indexable[Array[T, A]]
	alias Result = T
	alias Index = uint

	fn ref(uint i)
		return &self.list'i