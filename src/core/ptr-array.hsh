data PtrArray[Copyable T, A]
	T* data
	A allocator

	shared unit = size_of[T]()

	action create(allocator) :
		allocator <- allocator,
		data <- nil_ptr()
	
	action copy

	action destroy

	fn alloc(size) 
		data = Allocator(allocator).alloc(size * unit)
	
	shared fn from_data(allocator, T* data, uint size)
		var result = PtrArray(allocator)
		result.alloc(size)
		Mem.copy(data, result.data, size * unit)
		times(size, \i -> Copyable(result'i).copy())
		return result

	fn copy(uint size)
		return from_data(allocator, data, size)

	fn expand(uint from, uint to)
		data = Allocator(allocator).realloc(data, from * unit, to * unit)

	fn set(i, val)
		Mem.copy(&val, ptr(i), unit)
		Copyable(*ptr(i)).copy()

	fn del(i)
		destroy(&self'i)

	fn destroy_n(uint size)
		times(size, \i -> del i)
		Allocator(allocator).free(data)

	fn ptr(uint idx) -> T*
		return ptr_idx(data, idx)

	fn get(uint idx)
		return *ptr(idx)

instance[T, A] Indexable[PtrArray[T, A]]
	alias Result = T
	alias Index = uint

	fn ref(uint i)
		return self.ptr(i)