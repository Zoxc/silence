data Map[Hash K, Copyable V, Allocator A = Mem] where Eq[K]
	data Entry
		K key
		V value

		action copy

	PtrArray[Option[Entry], A] tbl
	uint mask
	uint entries

	action create :
			tbl <- PtrArray(A())
	
	action create(allocator) :
			tbl <- PtrArray(allocator)
	
	action copy
		if mask > 0
			tbl = tbl.copy(mask + 1)

	action destroy
		if mask > 0
			tbl.destroy_n(mask + 1)

	fn ensure_tbl()
		if mask == 0
			alloc_tbl(8)

	fn alloc_tbl(size)
		tbl.alloc(size)
		mask = size - 1
		times(size, \i -> Constructor[Option.None].construct(&tbl'i, ()))

	fn merge(Map[K, V, A] other)
		ensure_tbl()

		var i = 0
		loop
			if i > other.mask
				break

			match other.tbl'i as slot
				when Option.Some
					set(slot.val.key, slot.val.value)
				else

			i += 1

	fn expand() -> () constraints
		var new_map = Map[K, V, A](tbl.allocator)
		new_map.alloc_tbl((mask + 1) * 2)
		new_map.merge(self)
		self = new_map

	fn remove_index(K key, uint i)
		var hash = Hash(key).hash()
		var free = i
		var c = i

		entries -= 1

		loop
			c = (c + 1) & mask

			assert -> c != i # There's no free slot!

			match tbl'c as slot
				when Option.Some
					if Hash(slot.val.key).hash() == hash
						tbl'free = tbl'c
						free = c
				else
					tbl'free = nil
					return

	fn search(K key, free, found)
		ensure_tbl()

		var c = Hash(key).hash() & mask

		assert -> mask >= entries

		loop
			match tbl'c as slot
				when Option.Some
					if slot.val.key == key
						return found(&slot.val, c)
				else
					return free(&tbl'c)

			c = (c + 1) & mask

	fn each(f)
		var i = 0
		loop
			if i > mask
				break

			match tbl'i as slot
				when Option.Some
					f(slot.val.key, slot.val.value)
				else

			i += 1

	fn get_or_create(key, f)
		var free = \entry ->
			var new = f()
			*entry = some Entry(key, new)
			entries += 1
			if entries > mask
				expand() 

			return new
		var found = \entry, i ->
			return entry.value
		return search(key, free, found)

	fn set(key, value)
		var free = \entry ->
			*entry = some Entry(key, value)
			entries += 1
			if entries > mask
				expand() 

			return false
		var found = \entry, i ->
			entry.value = value
			return true
		return search(key, free, found)

	fn remove(key)
		var free = \entry ->
			return nil
		var found = \entry, i ->
			var r = some entry.value
			remove_index(key, i)
			return r
		return search(key, free, found)

	fn has(key)
		var free = \entry ->
			return false
		var found = \entry, i ->
			return true
		return search(key, free, found)

	fn get(key)
		var free = \entry ->
			return nil
		var found = \entry, i ->
			return some entry.value
		return search(key, free, found)

	fn assert_get(key) -> V
		return get(key).unwrap()