class Sizeable[T]

class Copyable[T]
	fn copy()

# Tuple types

data Unit
	action copy

data Cell[Val, Tuple Next]
	Val val
	Next next

	action copy

class Tuple[T]

instance Tuple[Unit]

instance[Val, Next] Tuple[Cell[Val, Next]]

data Option[T]
	when Some
		T val
	when None

	action copy

	fn unwrap_ref()
		return match self as v
			when Some
				&v.val
			when None
				assert -> false
				undef()

	fn unwrap()
		return *unwrap_ref()

	fn map(f)
		return match self as v
			when Some
				Option.Some(f(v.val))
			when None
				Option.None()

	fn has()
		return match self as v
			when Some
				true
			when None
				false


class Defaultable[T]
	shared fn construct(T* obj)

class Constructor[T]
	type_func Constructed
	type_func Args Tuple

	shared fn construct(Constructed *obj, Args args)

class Reference[T]
	type_func Type Sizeable

	fn get() -> Type*

class Callable[T]
	type_func Result Sizeable
	type_func Args Tuple

	fn apply(Args args) -> Result

class Indexable[T]
	type_func Result
	type_func Index

	fn ref(Index i) -> Result*

class Eq[T]
	shared fn equal(T lhs, T rhs) -> bool

enum Order
	Greater
	Equal
	Lesser

class Ord[T]
	shared fn cmp(T gt, T ls) -> Order

class Num[T]
	shared fn create(int i) -> T

	fn neg() -> T
	shared fn add(T lhs, T rhs) -> T
	shared fn sub(T lhs, T rhs) -> T
	shared fn mul(T lhs, T rhs) -> T
	shared fn div(T lhs, T rhs) -> T
	shared fn mod(T lhs, T rhs) -> T

class Bits[T]
	fn neg() -> T
	shared fn or(T lhs, T rhs) -> T
	shared fn xor(T lhs, T rhs) -> T
	shared fn and(T lhs, T rhs) -> T
	shared fn shr(T lhs, uint rhs) -> T
	shared fn shl(T lhs, uint rhs) -> T

class Joinable[T]
	shared fn join(T lhs, T rhs) -> T

class StringLiteral[T]
	shared fn create(char* data, uint size) -> T
